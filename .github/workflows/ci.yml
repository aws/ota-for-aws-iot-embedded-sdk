name: CI Checks

on:
  push:
    branches: ["**"]
  pull_request:
    branches:
      - main
      - development
  workflow_dispatch:

jobs:
  complexity:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup
        run: sudo apt-get install complexity
      - name: Complexity
        run: |
          find source/ -iname '*.c' |\
          xargs complexity --scores --threshold=0 --horrid-threshold=8

  unittest:
    runs-on: ubuntu-latest
    steps:
      - name: Clone This Repo
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build
        run: |
          sudo apt-get install -y lcov
          cmake -S test -B build/
          cmake --build build --target all
      - name: Test
        run: |
          cd build/
          ctest -E system --output-on-failure
          cd ..
      - name: Run Coverage
        run: |
          cmake --build build/ --target coverage
          lcov --rc lcov_branch_coverage=1 --remove build/coverage.info '*test*' --output-file build/coverage.info
          lcov --rc lcov_branch_coverage=1 --remove build/coverage.info '*CMakeCCompilerId*' --output-file build/coverage.info
          lcov --rc lcov_branch_coverage=1 --remove build/coverage.info '*mocks*' --output-file build/coverage.info
          lcov --rc lcov_branch_coverage=1 --remove build/coverage.info '*dependency*' --output-file build/coverage.info
          lcov --rc lcov_branch_coverage=1 --list build/coverage.info
      - name: Check Coverage
        uses: ChicagoFlutter/lcov-cop@v1.0.2
        with:
          path: "build/coverage.info"
          min_coverage: 80
          exclude: "**/*test*"
  doxygen:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install Doxygen
        run: |
          wget -qO- "http://doxygen.nl/files/doxygen-1.8.20.linux.bin.tar.gz" | sudo tar --strip-components=1 -xz -C /usr/local
          sudo apt-get install -y libclang-9-dev graphviz
      - name: Run Doxygen And Verify Stdout Is Empty
        run: |
          doxygen docs/doxygen/config.doxyfile 2>&1 | tee doxyoutput.txt
          if [[ "$(wc -c < doxyoutput.txt | bc)" = "0" ]]; then exit 0; else exit 1; fi

  spell-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Parent Repo
        uses: actions/checkout@v2
        with:
          ref: main
          repository: aws/aws-iot-device-sdk-embedded-C
      - name: Clone This Repo
        uses: actions/checkout@v2
        with:
          path: tmp
      - name: Install spell
        run: |
          sudo apt-get install spell
          sudo apt-get install util-linux
      - name: Check spelling
        run: |
          PATH=$PATH:$PWD/tools/spell
          find-unknown-comment-words --directory tmp/ --lexicon tmp/tools/lexicon.txt
          if [ $? -ne "0" ]; then
            exit 1
          fi
  formatting:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install Uncrustify
        run: sudo apt-get install uncrustify
      - name: Run Uncrustify
        run: find . -iname "*.[hc]" -exec uncrustify --check -c tools/uncrustify.cfg {} +
      - name: Check For Trailing Whitespace
        run: |
          set +e
          grep --exclude="README.md" -rnI -e "[[:blank:]]$" .
          if [ "$?" = "0" ]; then
            echo "Files have trailing whitespace."
            exit 1
          else
            exit 0
          fi
