/**
@mainpage
@anchor ota
@brief OTA (over-the-air) library.<br><br>

The FreeRTOS over-the-air (OTA) client library enables you to manage the notification of a newly available update, download the update, and perform cryptographic verification of the firmware update. Using the over-the-air (OTA) client library, you can logically separate firmware updates from the application running on your devices. The over-the-air (OTA) client library can share a network connection with the application, saving memory in resource-constrained devices. In addition, the over-the-air (OTA) client library lets you define application-specific logic for testing, committing, or rolling back a firmware update. The library supports different application protocols like Message Queuing Telemetry Transport (MQTT) and Hypertext Transfer Protocol (HTTP) and provides various configuration options you can fine tune depending on network type and conditions.

The major functions that this library’s APIs provide are –

- Register for notifications or poll for new update requests that are available.
- Receive, parse and validate the update request.
- Download and verify the file according to the information in the update request.
- Run a self-test before activating the received update to ensure the functional validity of the update.
- Update the status of the device.

AWS services can be used with this library to manage various cloud related topics such as sending firmware updates, monitoring large numbers of devices across multiple regions, reducing the blast radius of faulty deployments, and verifying the security of updates.

@dependencies{ota,OTA library}
@dot "OTA direct dependencies"
digraph ota_dependencies
{
    node[shape=box, fontname=Helvetica, fontsize=10, style=filled];
    edge[fontname=Helvetica, fontsize=10];

    ota[label="OTA", fillcolor="#cc00ccff"];

    subgraph
    {
        node[fillcolor="#cc00ccff"];
        mqtt[label="MQTT"];
    }
    subgraph
    {
        node[fillcolor="#aed8a9ff"];
        rank = same;
        http[label="HTTP"];
    }

    ota -> mqtt;
    ota -> http[label=" if data over http enabled", style="dashed"];
}
@enddot

Currently, the OTA library has the following dependencies:
- The MQTT library for communicating with AWS OTA services and streaming services.
- The HTTP library for communicating with Amazon S3 (Simple Storage Service).

*/

/**
@page ota_design Design
@brief Architecture behind the OTA library.

@image html ota_design_high_level.png

@section ota_design_library_configs OTA Library Configurations

The OTA library also provides various configuration options you can fine tune depending on network type and conditions. The library is provided with sensible default values for these configuration options. As these configuration settings are C pre-processor constant, they can be set with a `#define` in the config file (ota_config.h). It is recommended to review the configuration options and update as per use case and application requirement. Because they are compile-time constants, a library must be rebuilt if a configuration setting is changed.

For more details on OTA configuration at @ref ota_config

@section ota_design_library OTA Library

The OTA library provides OTA Agent APIs for application development and OTA PAL(Platform Layer Abstraction) APIs for platform specific functionality required for the OTA process. The OTA library components consists of the OTA Agent task, AWS Jobs and Streaming service support over MQTT/HTTP protocol.

@subsection ota_design_agent_api OTA Agent API’s

The OTA Agent APIs provides the programming interface to the application for OTA functionality like configuring the OTA Agent, controlling the OTA process and getting statistics. The implementation supports only one instance of the OTA Agent and attempts to start OTA Agent when it is already running will only reset the statistics.

@subsection ota_design_pal OTA Platform Abstraction Layer

The OTA platform abstraction layer provides APIs for the portable platform specific functionality of the OTA library. This includes the platform specific file storage , certificate storage , crypto verification, bootloader flags and other platform drivers. Example of OTA Pal port is for the FreeRTOS Windows Simulator.

More information about the abstraction layer and porting can be found here (https://docs.aws.amazon.com/freertos/latest/portingguide/afr-porting-ota.html).

@subsection ota_design_agent_task OTA Agent Task

The OTA Agent task is started when the OTA Library is initialized. The core functionality is implemented in the task as a state machine and can receive internal/external events. Depending on the type of event and the state , event handlers are called which can result in state transitions as defined in the transition table.

@section ota_design_job_parser Job Parser

The OTA Library uses AWS IoT jobs service and has an inbuilt job parsing functionality. AWS IoT Jobs service defines a set of remote operations that are sent to and executed on one or more devices connected to AWS IoT. Example of such operation can be updating the firmware, certificate rotation etc. The jobs service also provide features like job rollout,  where you can specify how quickly targets are notified of a pending job execution. This allows to create a staged rollout to better manage updates, reboots, and other operations. Other features like abort, timeout etc are also provided. Some of the important fields that a job document can contain are -

1. Protocol to download the file, ex MQTT, HTTP
2. File path for the update file to be stored on the device.
3. File size in bytes
4. File Id , default is 0
5. Code signing certificate path on device
6. Stream Id ( if MQTT protocol is selected for download )
7. Pre-signed S3 URL ( if HTTP protocol is selected for download )
8. Code signature
9. Code signature type

More about the AWS IoT Jobs here (https://docs.aws.amazon.com/iot/latest/developerguide/iot-jobs.html).

@subsection ota_design_control_data_protocols OTA Control and Data Protocols

The OTA Library operations with respect to the AWS IoT Job service can be divided into control ( Job notification, status updates, abort etc.) and data (file download). The current implementation supports MQTT protocol for control as well as data operations. HTTP is supported for data operations only i.e downloading the update file from a pre-signed URL shared in the job document. The file download protocol is selected when creating the OTA job and the OTA configuration on device has preferred protocol in case multiple protocols are selected.

@section ota_design_operation Operation diagram

The following diagram shows the workflow of OTA operation when MQTT protocol is selected for control as well as file download and AWS cloud services are used.

@image html ota_design_mqtt.png

The following diagram shows the workflow of OTA operation when HTTP protocol is selected for file download and AWS cloud services are used.

Note: HTTPS will only be used for file download from S3 pre-signed url , for control messages to the AWS cloud service it will use MQTT.

@image html ota_design_http.png
*/

/**
@page ota_demo Demo
@brief The OTA demo demonstrates usage of the OTA library.

The OTA Demo provides a simple example to demonstrate complete Over-The-Air update process. The OTA demo demonstrates creating an MQTT connection, initializing the OTA Library and logging OTA statistics when OTA is in process. The demo also provides an example on detecting network disconnect to suspend OTA Agent, try re-connecting with exponential delay with jitter and resume OTA operation when connection succeeds.

The OTA demo configurations are demo specific configurations and must be updated when integrating as per the application requirements from the default values.
More about OTA Demo configurations at @subpage ota_demo_config
*/

/**
@configpage{ota_demo,OTA demo}

@section OTA_DEMO_CONNECTION_TIMEOUT_MS

The configuration is the timeout for MQTT connection in milliseconds, if the MQTT connection is not established within this time, the MQTT connect function returns IOT_MQTT_TIMEOUT error code.

@configdefault `2000`

@section OTA_DEMO_KEEP_ALIVE_SECONDS

The maximum time interval in seconds that is permitted to elapse between the point a which the MQTT client finishes transmitting one control packet and the point it start sending the next. In the absence of control packet a PINGREQ  is sent. The broker must disconnect a client that does not send a message or a PINGREQ packet in one and a half times the keep alive interval.

@image html ota_config_keep_alive.png

@configdefault `120`

@section OTA_DEMO_TASK_DELAY_SECONDS

The delay used in the main OTA Demo task loop to periodically output the OTA statistics like number of packets received, dropped, processed and queued per connection.

@configdefault `1`

@section OTA_DEMO_CONN_RETRY_BASE_INTERVAL_SECONDS

The base interval in seconds for retrying network connection if disconnect is detected. Every next retry will be double this base interval time up to a maximum time interval OTA_DEMO_CONN_RETRY_MAX_INTERVAL_SECONDS.

@configdefault `4`

@section OTA_DEMO_CONN_RETRY_MAX_INTERVAL_SECONDS

The maximum interval in seconds for retrying network connection, if the retry interval reaches this maximum value it will no longer increase exponentially.

@configdefault `360`
*/

/**
@configpage{ota,OTA library}

@section otaconfigSTACK_SIZE

The configuration parameter specifies the size of the stack that will be allocated to the task being created (the size is specified in words, not bytes!). The amount of stack required is dependent on the application specific parameters, for more information Link (https://www.freertos.org/FAQMem.html#StackSize)

@configpossible Stack depth multiplied by the stack width must not exceed the maximum value that can be contained in a variable of type size_t <br>
@configrecommended As per platform requirement. <br>
@configdefault Varies by port.

@section otaconfigAGENT_PRIORITY

The OTA agents task priority. Normally it runs at a relatively lower priority and can be adjusted based on application requirements. For more information Link (https://www.freertos.org/RTOS-task-priority.html).

@configpossible  0 to ( configMAX_PRIORITIES – 1 ) <br>
@configrecommended As per application requirement. <br>
@configdefault tskIDLE_PRIORITY ( 0 )

@section otaconfigLOG2_FILE_BLOCK_SIZE

The OTA file is downloaded in blocks and this configuration defines the size of each file block. The parameter is log base 2 of the size of the file block (excluding the header).

@configpossible 8 to 16 ( 256 to 64 KB ) <br>
@configrecommended 8 to 12  ( 256 to 4 KB ) <br>
@configdefault 10 ( 1 KB )

@section otaconfigMAX_NUM_BLOCKS_REQUEST

The maximum number of file data blocks requested from OTA streaming service if using MQTT or from S3 if HTTP is selected for file download. This configuration parameter is sent with data requests and represents the maximum number of data blocks the service will send in response. The maximum limit for this must be calculated from the maximum data response limit per request (128 KB from service) divided by the block size. For example if block size is set as 1 KB then the maximum number of data blocks that we can request is 128/1 = 128 blocks. Configure this parameter to this maximum limit or lower based on how many data blocks response is expected for each data requests.

@configpossible 1 to ( 128/Block Size) <br>
@configrecommended As per platform/network. <br>
@configdefault 1

Following two diagrams compare otaconfigLOG2_FILE_BLOCK_SIZE set to 10 (1 KB) and 12 (4 KB) with otaconfigMAX_NUM_BLOCKS_REQUEST set to maximum i.e 128 and 32 respectively.

<b>otaconfigLOG2_FILE_BLOCK_SIZE is 10 ( 1KB )</b><br>
<b>otaconfigMAX_NUM_BLOCKS_REQUEST is 128</b>

@image html ota_config_block_size_10.png

<b>otaconfigLOG2_FILE_BLOCK_SIZE is 12 ( 4KB )</b><br>
<b>otaconfigMAX_NUM_BLOCKS_REQUEST is 32</b>

@image html ota_config_block_size_12.png

@section otaconfigSELF_TEST_RESPONSE_WAIT_MS

This is the timeout in milliseconds to wait for the self test phase to succeed before the device resets and rolls back to the version from which it was being updated. The basic default self-test is to update the job status in service for in progress job to success state. The timer can be set depending on the application requirement to perform any additional self-tests.

@configpossible The timer period must be greater than 0. <br>
@configrecommended As per application requirement. <br>
@configdefault 16000 msec

@section otaconfigFILE_REQUEST_WAIT_MS

The timeout for requesting the file blocks from the service if the requested blocks are not received. This timer is reset whenever a data block is received from the service so OTA Agent will only send the request message after being idle for this amount of time. The timer must be set as per application requirement, for example for devices with slower network this timer value can be higher.

@configpossible The timer period must be greater than 0. <br>
@configrecommended As per application requirement. <br>
@configdefault 10000

@section otaconfigMAX_THINGNAME_LEN

The maximum allowed length of the thing name used by the OTA agent. AWS IoT requires Thing names to be unique for each device that connects to the broker. Likewise, the OTA agent requires the developer to construct and pass in the Thing name when initializing the OTA agent. The agent uses this size to allocate static storage for the Thing name used in all OTA base topics. Namely `$aws/things/<thingName>`

@configpossible Minimum length of 1. Maximum length of 128. <br>
@configrecommended As per solution requirement for Thing Name lengths. <br>
@configdefault 64

@section otaconfigMAX_NUM_REQUEST_MOMENTUM

The maximum number of requests allowed to send without a response before we abort. This configuration parameter sets the maximum number of times the requests are made over the selected communication channel before aborting and returning error.

@configpossible The momentum must be greater than 0. <br>
@configrecommended As per application and network requirement for retries. <br>
@configdefault 32

@section otaconfigMAX_NUM_OTA_DATA_BUFFERS

The number of data buffers reserved by the OTA agent. This configurations parameter sets the maximum number of static data buffers used by the OTA agent for job document and file data blocks received.

@configpossible The number of buffers must be greater than or equal to 1. <br>
@configrecommended 2 <br>
@configdefault 4 for Windows Simulator Port

@section otaconfigENABLED_CONTROL_PROTOCOL

This configurations parameter sets the default protocol for all the OTA control operations like requesting OTA job, updating the job status etc.

<b>Note</b>: Only MQTT is supported at this time for control operations.

@configpossible OTA_CONTROL_OVER_MQTT <br>
@configrecommended  OTA_CONTROL_OVER_MQTT <br>
@configdefault OTA_CONTROL_OVER_MQTT

@section otaconfigENABLED_DATA_PROTOCOLS

This configurations parameter enables the protocols selected for the data operations like requesting file blocks from the service. Note - Both MQTT and HTTP is supported for data transfer. This configuration parameter can be set to following -

<ul>
  <li>Enable data over MQTT - ( OTA_DATA_OVER_MQTT )</li>
  <li>Enable data over HTTP - ( OTA_DATA_OVER_HTTP)</li>
  <li>Enable data over both MQTT & HTTP - ( OTA_DATA_OVER_MQTT | OTA_DATA_OVER_HTTP )</li>
</ul>

@configpossible OTA_DATA_OVER_MQTT , OTA_DATA_OVER_HTTP, OTA_DATA_OVER_MQTT | OTA_DATA_OVER_HTTP <br>
@configrecommended  As per application requirement for supported protocol. <br>
@configdefault OTA_DATA_OVER_MQTT | OTA_DATA_OVER_HTTP

@section otaconfigOTA_PRIMARY_DATA_PROTOCOL

The primary data protocol is the preferred protocol selected for OTA data operations. Primary data protocol will be the protocol used for downloading file if more than one protocol is selected while creating OTA job.

@configpossible OTA_DATA_OVER_MQTT , OTA_DATA_OVER_HTTP <br>
@configrecommended  As per application requirement for preferred protocol. <br>
@configdefault OTA_DATA_OVER_MQTT
*/